version: "3.9"

services:
  traefik:
    image: traefik:v2.11
    container_name: traefik
    restart: always
    security_opt:
      - no-new-privileges:true
    command:
      - "--global.sendAnonymousUsage=false"
      - "--api.dashboard=true"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.watch=true"
      - "--providers.docker.exposedByDefault=false"
      - "--providers.file.filename=/etc/traefik/dynamic.yml"
      - "--providers.file.watch=true"
      - "--log.level=INFO"
      - "--log.format=common"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.web.http.redirections.entryPoint.to=websecure"
      - "--entryPoints.web.http.redirections.entryPoint.scheme=https"
      - "--entryPoints.websecure.address=:443"
      - "--entryPoints.websecure.http.tls.certResolver=letsencrypt"
      - "--certificatesResolvers.letsencrypt.acme.email=${USER_EMAIL}"
      - "--certificatesResolvers.letsencrypt.acme.storage=/etc/traefik/acme.json"
      - "--certificatesResolvers.letsencrypt.acme.keyType=EC384"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      # - "--certificatesResolvers.letsencrypt.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory"
      #- "--certificatesResolvers.letsencrypt.acme.httpChallenge.entryPoint=web"
    ports:
      - 80:80
      - 443:443
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik-config/acme.json:/etc/traefik/acme.json
      - ./traefik-config/dynamic.yml:/etc/traefik/dynamic.yml:ro
      - ./traefik-config/certs:/etc/certs:ro
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN_NAME}`)"
      - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_USERNAME}:${TRAEFIK_PASSWORD}"
      - "traefik.http.routers.traefik.middlewares=traefik-auth"
      - "traefik.http.routers.traefik.service=api@internal"

  error_pages:
    image: ttrafelet/traefik_error_pages
    container_name: error_pages
    restart: always
    expose:
      - "5000"
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.error-pages.entrypoints=websecure"
      - "traefik.http.routers.error-pages.rule=HostRegexp(`{catchall:.*}`)"
      - "traefik.http.middlewares.serve-pretty-errors.errors.status=400-599"
      - "traefik.http.middlewares.serve-pretty-errors.errors.service=error-pages"
      - "traefik.http.middlewares.serve-pretty-errors.errors.query=/{status}.html"
      - "traefik.http.services.error-pages.loadbalancer.server.port=5000"
      - "traefik.http.routers.error-pages.service=error-pages"
      - "traefik.http.routers.error-pages.priority=1"

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    command: -H unix:///var/run/docker.sock
    restart: always
    depends_on:
      - traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./portainer-data:/data
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.entrypoints=websecure"
      - "traefik.http.routers.portainer.rule=Host(`portainer.${DOMAIN_NAME}`)"
      - "traefik.http.routers.portainer.service=portainer"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"

  drone:
    image: drone/drone:2
    container_name: drone
    restart: unless-stopped
    networks:
      - proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./drone-data:/data
    depends_on:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.drone.entrypoints=websecure"
      - "traefik.http.routers.drone.rule=Host(`drone.${DOMAIN_NAME}`)"
      - "traefik.http.services.drone.loadbalancer.server.port=80"

  drone-runner-1:
    image: drone/drone-runner-docker:1
    container_name: drone-runner-1
    restart: unless-stopped
    depends_on:
      drone:
        condition: service_started
    networks:
      - proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

networks:
  proxy:
    external: true
